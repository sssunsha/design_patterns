/*
 * 组合(Composite)模式的其它翻译名称也很多,比如合成模式、树模式等等。在《设计模式》一书中给出的定义是:
	将对象以树形结构组织起来,以达成“部分-整体”的层次结构,使得客户端对单个对象和组合对象的使用具有一致性。
 *
 */

/*
 * 1) 抽象构件角色(Component):它为组合中的对象声明接口,也可以为共有接口实现缺省行为。
   2) 树叶构件角色(Leaf):在组合中表示叶节点对象——没有子节点,实现抽象构件角色声明的接口。
   3) 树枝构件角色(Composite):在组合中表示分支节点对象——有子节点,实现抽象构件角色声明的接口;存储子部件。
 *
 */

/*
 * 	五、优缺点
	从上面的举例中可以看到,组合模式有以下优点:
	1) 使客户端调用简单,客户端可以一致的使用组合结构或其中单个对象,用户就不必关心自己处理的是单个对象还是整个组合结构,这就简化了客户端代码。
	2) 更容易在组合体内加入对象部件. 客户端不必因为加入了新的对象部件而更改代码。这一点符合开闭原则的要求,对系统的二次开发和功能扩展很有利!
		当然组合模式也少不了缺点:组合模式不容易限制组合中的构件。
	六、总结
	组合模式是一个应用非常广泛的设计模式,在前面已经介绍过的解释器模式、享元模式中都是用到了组合模式。它本身比较简单但是很有内涵,
	掌握了它对你的开发设计有很大的帮助。
 *
 */
#include "composite.h"
void composite_setup()
{

}
void composite_run()
{

}
void composite_clean()
{

}

// demo codes for composite design pattern
